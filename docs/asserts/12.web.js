webpackJsonp(12,{36:function(a,b,c){a.exports='<h1>Core</h1><h2><code>property</code> stepSelector : <code>&#39;.step&#39;</code></h2><p>The jQuery selector to specify each step.</p><h2><code>property</code> notSupportedClass : <code>&#39;not-supported&#39;</code></h2><p>Class name to remove on root element if jmpress.js is supported.</p><h2><code>property</code> fullscreen : <code>true</code></h2><p>Whether jmpress.js should run in full screen mode or in a container.</p><h2><code>property</code> containerClass</h2><p>A class name to set on the container. The overall container of the camera. It has no transformation applied so you can set some background on it.</p><h2><code>property</code> canvasClass</h2><p>A class name to set on the canvas. The canvas is the element, which contains the steps.</p><h2><code>property</code> areaClass</h2><p>A class name to set on the area. The area is some middle element, which is needed to build this camera.</p><h2><code>property</code> animation</h2><p>Set the CSS animation values for transitions between slides.</p><div><pre>$(&#39;#jmpress&#39;).jmpress({<br/>	animation: {<br/>		transformOrigin: &#39;center center&#39;, // Point on which to transform<br/>		transitionDuration: &#39;5s&#39;,         // Length of animation<br/>		transitionDelay: &#39;500ms&#39;,         // Delay before animating<br/>		transitionTimingFunction: &#39;ease&#39;  // Animation effect<br/>	}<br/>});</pre><p></p></div><p>See <a href="https://developer.mozilla.org/en/CSS/transform">Mozilla CSS docs</a> for more info.</p><h2><code>method</code> init( [step] )</h2><p>Initializes jmpress with the default config (like impress.js). Can also initialize a single step; useful when dynamically adding steps:</p><div><pre>var newStep = $(&#39;&lt;div class=&quot;step&quot; /&gt;&#39;).html(&#39;This is a new step&#39;);<br/>$(&#39;#container&#39;).append(newStep);<br/>$(&#39;#jmpress&#39;).jmpress(&#39;init&#39;, newStep);</pre><p></p></div><h2><code>method</code> init( config )</h2><p>Initializes jmpress with a custom config object.</p><h2><code>method</code> initialized()</h2><p>Returns true if jmpress is initialized.</p><h2><code>method</code> deinit( [step] )</h2><p>Deinits jmpress, returning to it&#39;s original state. If already deinited it does nothing. This is useful for enabling a print mode or when dynamically removing steps:</p><div><pre>var removeStep = $(&#39;.step&#39;).first();<br/>$(&#39;#jmpress&#39;).jmpress(&#39;deinit&#39;, removeStep);<br/>removeStep.remove();</pre><p></p></div><h2><code>method</code> settings()</h2><p>Returns the settings object which you can modify.</p><h2><code>method</code> select( selector )</h2><p>Move to the first step matching the given selector.</p><h2><code>method</code> goTo( selector )</h2><p>Same as <code>select( selector )</code>.</p><h2><code>method</code> next()</h2><p>Select the next step in flow.</p><h2><code>method</code> prev()</h2><p>Select the previous step in flow.</p><h2><code>method</code> home()</h2><p>Select the first step in DOM.</p><h2><code>method</code> end()</h2><p>Select the last step in DOM.</p><h2><code>method</code> fire( callbackName, element, eventData )</h2><p>Fire a event.</p><h2><code>method</code> canvas()</h2><p>Returns the canvas element as jQuery object</p><h2><code>method</code> canvas( css )</h2><p>Sets styles on the canvas element and returns it.</p><h2><code>method</code> css( element, cssAsObject )</h2><p>Applies css with the correct browser prefix.</p><h2><code>method</code> reapply( step )</h2><p>Reapplies styles on step, should be called after modifying stepData.</p><h2><code>method</code> defaults()</h2><p>Return or modify the default settings used in jmpress.js.</p><h2><code>method</code> register( name, callback )</h2><p>Register a new callback.</p><h2><code>method</code> dataset( element )</h2><p>Returns the dataset of an element.</p><h2><code>callback</code> afterInit : <code>function( element, eventData )</code></h2><p>After all the steps are initialized.</p><h2><code>callback</code> afterDeinit : <code>function( element, eventData )</code></h2><p>After all the steps are de-initialized.</p><h2><code>callback</code> beforeChange : <code>function( element, eventData )</code></h2><p>Before each step change. <code>eventData.cancel()</code> cancels the select.</p><h2><code>callback</code> beforeDeinit : <code>function( element, eventData )</code></h2><p>Before all the steps are de-initialized.</p><h2><code>callback</code> beforeInit : <code>function( element, eventData )</code></h2><p>Before all the steps are initialized.</p><h2><code>callback</code> beforeInitStep : <code>function( element, eventData )</code></h2><p>On each step as it is initialized.</p><h2><code>callback</code> initStep : <code>function( element, eventData )</code></h2><p>On each step as it is initialized.</p><h2><code>callback</code> applyStep : <code>function( element, eventData )</code></h2><p>Called last on each step after it is initialized.</p><h2><code>callback</code> unapplyStep : <code>function( element, eventData )</code></h2><p>Called last on each step after is is de-initialized.</p><h2><code>callback</code> selectEnd : <code>function( element, eventData )</code></h2><p>Callback should return the last step.</p><h2><code>callback</code> selectHome : <code>function( element, eventData )</code></h2><p>Callback should return the first step.</p><h2><code>callback</code> selectInitialStep : <code>function( element, eventData )</code></h2><p>Callback should return the initial step.</p><h2><code>callback</code> selectNext : <code>function( element, eventData )</code></h2><p>Callback should return the next step.</p><h2><code>callback</code> selectPrev : <code>function( element, eventData )</code></h2><p>Callback should return the prev step. selected.</p>'}})