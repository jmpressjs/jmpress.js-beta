webpackJsonp(7,{42:function(a,b,c){a.exports='<h1>Core</h1><h2>Properties</h2><h3><code>property</code> stepSelector : <code>&#39;.step&#39;</code></h3><p>The jQuery selector to specify each step.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	stepSelector: &#39;section&#39; // use &lt;section&gt; tags as steps<br/>});</pre><h3><code>property</code> notSupportedClass : <code>&#39;not-supported&#39;</code></h3><p>Class name to remove on root element if jmpress.js is supported.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	notSupportedClass: &#39;no-jmpress&#39;<br/>});</pre><h3><code>property</code> fullscreen : <code>true</code></h3><p>Whether jmpress.js should run in full screen mode or in a container.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	fullscreen: false<br/>});</pre><h3><code>property</code> containerClass</h3><p>A class name to set on the container. The overall container of the camera. It has no transformation applied so you can set some background on it.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	containerClass: &#39;jmpress-container&#39;<br/>});</pre><h3><code>property</code> canvasClass</h3><p>A class name to set on the canvas. The canvas is the element, which contains the steps.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	canvasClass: &#39;jmpress-canvas&#39;<br/>});</pre><h3><code>property</code> areaClass</h3><p>A class name to set on the area. The area is some middle element, which is needed to build this camera.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	areaClass: &#39;jmpress-area&#39;<br/>});</pre><h3><code>property</code> animation</h3><p>Set the CSS animation values for transitions between slides.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	animation: {<br/>		transformOrigin: &#39;center center&#39;, // Point on which to transform<br/>		transitionDuration: &#39;5s&#39;,         // Length of animation<br/>		transitionDelay: &#39;500ms&#39;,         // Delay before animating<br/>		transitionTimingFunction: &#39;ease&#39;  // Animation effect<br/>	},<br/>	transitionDuration: 5000 // Set this according to animation.transitionDuration<br/>	                         // It is used for setting the timeout for the transition<br/>});</pre><p>See <a href="https://developer.mozilla.org/en/CSS/transform">Mozilla CSS docs</a> for more info.</p><h2>Methods</h2><h3><code>method</code> init( ) - shortcut .jmpress( )</h3><p>Initializes jmpress with the default config (like impress.js).</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress();</pre><h3><code>method</code> init( config ) - shortcut .jmpress( config )</h3><p>Initializes jmpress with a custom config object.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress({<br/>	// config object literal here<br/>});</pre><h3><code>method</code> init( [step] )</h3><p>Can also initialize a single step. This is required when dynamically adding steps:</p><pre class="language-javascript">var newStep = $(&#39;&lt;div class=&quot;step&quot; /&gt;&#39;).html(&#39;This is a new step&#39;);<br/>$(&#39;#jmpress&#39;).jmpress(&#39;canvas&#39;).append(newStep);<br/>$(&#39;#jmpress&#39;).jmpress(&#39;init&#39;, newStep);</pre><p>See the dynamic form <a href="#docs-examples">example</a></p><h3><code>method</code> initialized()</h3><p>Returns true if jmpress is initialized.</p><pre class="language-javascript">var isInit = $(&#39;#jmpress&#39;).jmpress(&#39;initialized&#39;);</pre><h3><code>method</code> deinit( [step] )</h3><p>Deinits jmpress, returning to it&#39;s original state. If already deinited it does nothing. This is useful for enabling a print mode or when dynamically removing steps:</p><pre class="language-javascript">var removeStep = $(&#39;.step&#39;).first();<br/>$(&#39;#jmpress&#39;).jmpress(&#39;deinit&#39;, removeStep);<br/>removeStep.remove();</pre><h3><code>method</code> settings()</h3><p>Returns the settings object which you can modify.</p><pre class="language-javascript">var settings = $(&#39;#jmpress&#39;).jmpress(&#39;settings&#39;);<br/>settings.animation.transitionDuration = &#39;10s&#39;;</pre><h3><code>method</code> select( selector, reason )</h3><p>Move to the first step matching the given selector. <code>reason</code> can be a string which passed to the callbacks in <code>eventData.reason</code>.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;select&#39;, &#39;#step-5&#39;, &#39;i said so&#39;);</pre><h3><code>method</code> goTo( selector )</h3><p>Same as <code>select( selector, &#39;jump&#39; )</code>.</p><h3><code>method</code> next()</h3><p>Select the next step in flow.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;next&#39;);</pre><h3><code>method</code> prev()</h3><p>Select the previous step in flow.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;prev&#39;);</pre><h3><code>method</code> home()</h3><p>Select the first step in DOM.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;home&#39;);</pre><h3><code>method</code> end()</h3><p>Select the last step in DOM.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;end&#39;);</pre><h3><code>method</code> fire( callbackName, element, eventData )</h3><p>Fire a event. <code>callbackName</code> must be registered as callback before.</p><pre class="language-javascript">$(&#39;#jmpress&#39;).jmpress(&#39;fire&#39;, &#39;selectNext&#39;, step, {<br/>	// Additional data for event here<br/>});</pre><h3><code>method</code> canvas()</h3><p>Returns the canvas element as jQuery object.</p><pre class="language-javascript">var canvas = $(&#39;#jmpress&#39;).jmpress(&#39;canvas&#39;);</pre><h3><code>method</code> canvas( css )</h3><p>Sets styles on the canvas element and returns it.</p><p><strong>deprecated</strong>: Use <code>canvasClass</code> and CSS.</p><h3><code>method</code> css( element, cssAsObject )</h3><p>Applies css with the correct browser prefix.</p><pre class="language-javascript">var el = $(&#39;#step-2&#39;).get(0);<br/>$(&#39;#jmpress&#39;).jmpress(&#39;css&#39;, el, {<br/>	transform: &#39;rotate(90deg)&#39; // Will be -webkit-transform if a Webkit browser<br/>});</pre><h3><code>method</code> reapply( step )</h3><p>Reapplies styles on step. Should be called after modifying <code>step.data(&quot;stepData&quot;)</code>, which is allowed.</p><h3><code>method</code> defaults()</h3><p>Return or modify the default settings used in jmpress.js. Should only be used in plugins. Use <code>settings</code> instead.</p><pre class="language-javascript">var defaults = $(&#39;#jmpress&#39;).jmpress(&#39;defaults&#39;);</pre><h3><code>method</code> register( callbackName )</h3><p>Register a new callback. After that it can be <code>fire</code>ed and listened.</p><h3><code>method</code> register( name, fn )</h3><p>Register a new jmpress function.</p><h3><code>method</code> active()</h3><p>Returns the active step as jQuery object.</p><pre class="language-javascript">var activeStep = $(&#39;#jmpress&#39;).jmpress(&#39;active&#39;);</pre><h3><code>method</code> current()</h3><p>Returns the a state for the jmpress instance. Should be only used by plugins for saving some state.</p><h3><code>method</code> dataset( element )</h3><p>Returns the dataset of an element. <em>private</em></p><h2>Callbacks</h2><h3><code>callback</code> afterInit : <code>function( element, eventData )</code></h3><p>After all the steps are initialized.</p><h3><code>callback</code> afterDeinit : <code>function( element, eventData )</code></h3><p>After all the steps are de-initialized.</p><h3><code>callback</code> beforeChange : <code>function( element, eventData )</code></h3><p>Before each step change. <code>eventData.cancel()</code> cancels the select.</p><h3><code>callback</code> beforeDeinit : <code>function( element, eventData )</code></h3><p>Before all the steps are de-initialized.</p><h3><code>callback</code> beforeInit : <code>function( element, eventData )</code></h3><p>Before all the steps are initialized.</p><h3><code>callback</code> beforeInitStep : <code>function( element, eventData )</code></h3><p>On each step as it is initialized.</p><h3><code>callback</code> initStep : <code>function( element, eventData )</code></h3><p>On each step as it is initialized. A listener should read values from <code>eventData.data</code> and store them after string-to-xxx conversion into <code>eventData.stepData</code></p><h3><code>callback</code> applyStep : <code>function( element, eventData )</code></h3><p>Called last on each step after it is initialized to apply css. A listener should read <code>eventData.stepData</code> and apply css the the <code>element</code></p><h3><code>callback</code> unapplyStep : <code>function( element, eventData )</code></h3><p>Called last on each step after is is de-initialized to remove css.</p><h3><code>callback</code> selectEnd : <code>function( element, eventData )</code></h3><p>Listener should return the last step. A listener should return <code>undefined</code> if it do not want to modify the selection of the previous listener. If it returns a value it overrides the old selection.</p><h3><code>callback</code> selectHome : <code>function( element, eventData )</code></h3><p>Listener should return the first step.</p><h3><code>callback</code> selectInitialStep : <code>function( element, eventData )</code></h3><p>Listener should return the initial step.</p><h3><code>callback</code> selectNext : <code>function( element, eventData )</code></h3><p>Listener should return the next step.</p><h3><code>callback</code> selectPrev : <code>function( element, eventData )</code></h3><p>Listener should return the previous step.</p><h3><code>callback</code> idle : <code>function( element, eventData )</code></h3><p>Called after jmpress finished transition and there is nothing pending.</p><h3><code>callback</code> applyTarget : <code>function( element, eventData )</code></h3><p>Listener should apply CSS for the camera to <code>eventData.canvas</code> and <code>eventData.area</code>.</p>'}})